{"ast":null,"code":"import React,{useState}from'react';import LocationForm from'./LocationForm';import{useNavigate}from'react-router-dom';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faCloud,faArrowLeft}from'@fortawesome/free-solid-svg-icons';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const WeatherApp=()=>{const[weatherData,setWeatherData]=useState(null);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const navigate=useNavigate();const handleSubmitLocation=async location=>{setLoading(true);setError(null);try{const response=await fetch(\"https://geocoding-api.open-meteo.com/v1/search?name=\".concat(encodeURIComponent(location),\"&count=1&language=en&format=json\"));const data=await response.json();if(data&&data.results&&data.results.length>0){const{latitude,longitude,timezone}=data.results[0];const forecastResponse=await fetch(\"https://api.open-meteo.com/v1/forecast?latitude=\".concat(latitude,\"&longitude=\").concat(longitude,\"&hourly=&daily=temperature_2m_max,temperature_2m_min,uv_index_max,uv_index_clear_sky_max,precipitation_sum,precipitation_probability_max,rain_sum,wind_speed_10m_max,&timezone=\").concat(timezone,\"&past_days=7&forecast_days=14\"));const forecastData=await forecastResponse.json();setWeatherData(forecastData);navigate('/forecast',{state:{forecastData}});}else{throw new Error('Location not found');}}catch(error){console.error('Error fetching weather data:',error);setError('Failed to fetch weather data. Please try again.');}finally{setLoading(false);}};const navigateGoBack=()=>{navigate(\"/\",{replace:true});};return/*#__PURE__*/_jsxs(\"div\",{className:\"weather-app\",children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faArrowLeft,className:\"back-btn\",onClick:navigateGoBack}),loading?/*#__PURE__*/_jsx(\"div\",{className:\"loading-overlay\",children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faCloud,className:\"cloud-icon\"})}):/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"main-heading\",children:\"Weather\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"forecast\",children:\"Forecast\"}),/*#__PURE__*/_jsx(\"div\",{className:\"search-container\",children:/*#__PURE__*/_jsx(LocationForm,{onSubmit:handleSubmitLocation})}),error&&/*#__PURE__*/_jsx(\"p\",{children:error})]})]});};export default WeatherApp;","map":{"version":3,"names":["React","useState","LocationForm","useNavigate","FontAwesomeIcon","faCloud","faArrowLeft","jsx","_jsx","jsxs","_jsxs","WeatherApp","weatherData","setWeatherData","loading","setLoading","error","setError","navigate","handleSubmitLocation","location","response","fetch","concat","encodeURIComponent","data","json","results","length","latitude","longitude","timezone","forecastResponse","forecastData","state","Error","console","navigateGoBack","replace","className","children","icon","onClick","onSubmit"],"sources":["C:/Users/kobri/Desktop/ALL THINGS CODING/Project Portfolio/weather-app/src/components/WeatherApp.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport LocationForm from './LocationForm';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCloud, faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst WeatherApp = () => {\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmitLocation = async (location) => {\r\n    setLoading(true);\r\n    setError(null);\r\n  \r\n    try {\r\n      const response = await fetch(\r\n        `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(location)}&count=1&language=en&format=json`\r\n      );\r\n      const data = await response.json();\r\n      if (data && data.results && data.results.length > 0) {\r\n        const { latitude, longitude, timezone } = data.results[0];\r\n        const forecastResponse = await fetch(\r\n          `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&hourly=&daily=temperature_2m_max,temperature_2m_min,uv_index_max,uv_index_clear_sky_max,precipitation_sum,precipitation_probability_max,rain_sum,wind_speed_10m_max,&timezone=${timezone}&past_days=7&forecast_days=14`\r\n        );\r\n        const forecastData = await forecastResponse.json();\r\n        setWeatherData(forecastData);\r\n        navigate('/forecast', { state: { forecastData } });\r\n      } else {\r\n        throw new Error('Location not found');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching weather data:', error);\r\n      setError('Failed to fetch weather data. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const navigateGoBack = () => {\r\n    navigate(\"/\", {replace: true});\r\n  };\r\n\r\n  return (\r\n    <div className=\"weather-app\">\r\n      <FontAwesomeIcon icon={faArrowLeft} className=\"back-btn\" onClick={navigateGoBack} />\r\n      {loading ? (\r\n        <div className=\"loading-overlay\">\r\n          <FontAwesomeIcon icon={faCloud} className=\"cloud-icon\" />\r\n        </div>\r\n      ) : (\r\n        <div className=\"app-container\">\r\n          <h1 className=\"main-heading\">Weather</h1>\r\n          <h2 className=\"forecast\">Forecast</h2>\r\n          <div className=\"search-container\">\r\n            <LocationForm onSubmit={handleSubmitLocation} />\r\n          </div>\r\n          {error && <p>{error}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default WeatherApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}