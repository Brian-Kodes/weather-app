{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kobri\\\\Desktop\\\\ALL THINGS CODING\\\\Project Portfolio\\\\weather-app\\\\src\\\\components\\\\LocationForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LocationForm = ({\n  onSubmit\n}) => {\n  _s();\n  const [location, setLocation] = useState('');\n  const [suggestions, setSuggestions] = useState([]);\n  const fetchSuggestions = async query => {\n    try {\n      const response = await fetch(`https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(query)}&count=5&language=en&format=json`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch location suggestions');\n      }\n      const data = await response.json();\n      if (data && data.results && data.results.length > 0) {\n        const suggestions = Array.from(new Set(data.results.map(result => result.name)));\n        setSuggestions(suggestions);\n      } else {\n        setSuggestions([]);\n      }\n    } catch (error) {\n      console.error('Error fetching location suggestions:', error);\n      setSuggestions([]);\n    }\n  };\n  useEffect(() => {\n    fetchSuggestions(location);\n  }, [location]);\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(location);\n  };\n  const handleSuggestionClick = suggestion => {\n    setLocation(suggestion, suggestion.country);\n    setSuggestions([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"search-bar\",\n      type: \"text\",\n      placeholder: \"Enter location\",\n      value: location,\n      onChange: e => setLocation(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"submit-btn\",\n      children: \"Get Weather\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), suggestions.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"suggestions-list\",\n      children: suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSuggestionClick(suggestion),\n        children: '${suggestion.name}, ${suggestion.country}'\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(LocationForm, \"QGP2IQb48amL96r+RHh9e0tb2nY=\");\n_c = LocationForm;\nexport default LocationForm;\nvar _c;\n$RefreshReg$(_c, \"LocationForm\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LocationForm","onSubmit","_s","location","setLocation","suggestions","setSuggestions","fetchSuggestions","query","response","fetch","encodeURIComponent","ok","Error","data","json","results","length","Array","from","Set","map","result","name","error","console","handleSubmit","event","preventDefault","handleSuggestionClick","suggestion","country","children","className","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","_c","$RefreshReg$"],"sources":["C:/Users/kobri/Desktop/ALL THINGS CODING/Project Portfolio/weather-app/src/components/LocationForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst LocationForm = ({ onSubmit }) => {\r\n  const [location, setLocation] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  const fetchSuggestions = async (query) => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(query)}&count=5&language=en&format=json`\r\n      );\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch location suggestions');\r\n      }\r\n      const data = await response.json();\r\n      if (data && data.results && data.results.length > 0) {\r\n        const suggestions = Array.from(new Set(data.results.map((result) => result.name)));\r\n        setSuggestions(suggestions);\r\n      } else {\r\n        setSuggestions([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching location suggestions:', error);\r\n      setSuggestions([]);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSuggestions(location);\r\n  }, [location]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    onSubmit(location);\r\n  };\r\n\r\n  const handleSuggestionClick = (suggestion) => {\r\n    setLocation(suggestion, suggestion.country);\r\n    setSuggestions([]);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"search-bar\"\r\n        type=\"text\"\r\n        placeholder=\"Enter location\"\r\n        value={location}\r\n        onChange={(e) => setLocation(e.target.value)}\r\n      />\r\n      <button type=\"submit\" className=\"submit-btn\">Get Weather</button>\r\n      {suggestions.length > 0 && (\r\n        <ul className=\"suggestions-list\">\r\n          {suggestions.map((suggestion, index) => (\r\n            <li key = {index} onClick={() => handleSuggestionClick(suggestion)}>{'${suggestion.name}, ${suggestion.country}'}</li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LocationForm;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}